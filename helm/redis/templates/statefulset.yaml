apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-redis
  labels:
    app: redis
    release: {{ .Release.Name }}
spec:
  serviceName: {{ .Release.Name }}-redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: redis
        release: {{ .Release.Name }}
    spec:
      containers:
      - name: redis
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        {{- if .Values.persistence.enabled }}
        volumeMounts:
        - name: data
          mountPath: /data
        {{- end }}
        command:
        - redis-server
        args:
        - "--maxmemory"
        - "{{ .Values.redis.config.maxmemory }}"
        - "--maxmemory-policy"
        - "{{ .Values.redis.config.maxmemory_policy }}"
        {{- if .Values.auth.enabled }}
        - "--requirepass"
        - "$(REDIS_PASSWORD)"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-redis
              key: redis-password
        {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.persistence.storageClass | quote }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
  {{- end }} 